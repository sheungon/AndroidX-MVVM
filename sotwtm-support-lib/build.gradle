apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

// For Code coverage
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.ext.compile_sdk_version
    buildToolsVersion rootProject.ext.build_tools_version

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode 1
        versionName rootProject.ext.versions.support_lib
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets { main.java.srcDirs += 'src/main/kotlin' }

    /*
    * To enable Android Data Binding Library
    * See, https://developer.android.com/topic/libraries/data-binding/index.html
    * */
    dataBinding {
        enabled = true
    }

    // Fix build error on including libs that with these files
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/MANIFEST.MF'
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // continue build even found lint error
    lintOptions {
        abortOnError false
    }

    dexOptions {
        // Avoid proguard build with OOM error
        javaMaxHeapSize "4g"
        jumboMode = true
    }

    kapt {
        useBuildCache = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

dependencies {

    // Android support libs
    // ******* These libs must be listed in the sub projects. Otherwise, it will fail to build
    implementation "com.android.support:appcompat-v7:$rootProject.ext.versions.support_lib"
    implementation "com.android.support:design:$rootProject.ext.versions.support_lib"
    implementation "android.arch.lifecycle:viewmodel:$rootProject.ext.versions.lifecycle"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-$rootProject.ext.versions.kotlin_env:$rootProject.ext.versions.kotlin_plugin"
    kapt "com.android.databinding:compiler:$rootProject.ext.versions.android_plugin"

    // AndroidEasyLog
    implementation "com.sotwtm.util:ec-log:$rootProject.ext.versions.android_ec_log"

    /***** For Unit Test *****/
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$rootProject.ext.versions.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation "com.google.dagger:dagger:$rootProject.ext.versions.dagger_2"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$rootProject.ext.versions.dagger_2"
    testImplementation deps.junit
    testImplementation "com.google.dagger:dagger:$rootProject.ext.versions.dagger_2"
    kaptTest "com.google.dagger:dagger-compiler:$rootProject.ext.versions.dagger_2"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.versions.mockito"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.versions.mockito"
    androidTestImplementation("com.github.fabioCollini.daggermock:daggermock-kotlin:$rootProject.ext.versions.dagger_mock", {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    })
    testImplementation("com.github.fabioCollini.daggermock:daggermock-kotlin:$rootProject.ext.versions.dagger_mock", {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    })
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.versions.power_mock"
    testImplementation "org.powermock:powermock-module-junit4-rule-agent:$rootProject.ext.versions.power_mock"
    testImplementation "org.powermock:powermock-module-junit4-rule:$rootProject.ext.versions.power_mock"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.versions.power_mock"
}
